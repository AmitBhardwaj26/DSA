/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int n=10,m=10;
    vector<vector<int>> ans;
    bool check(vector<int> v)
    {
        int q=0,z=0;
        for(int i=0;i<=9;i++)
        {
            if(v[i]>0) z+=v[i];
            if(v[i]%2!=0) q++;
            if(q>1) return 0;
        }
        if((z%2==0 && q==0) || (z%2!=0 && q==1)) return 1;
        
        return 0;
    }
    
    void solve(TreeNode* root,vector<int> v)
    {
        if(!root) {  return;}
        v[root->val]++;
        if(!root->left && !root->right) ans.push_back(v);
         solve(root->left,v);
         solve(root->right,v);
    }
    
    int pseudoPalindromicPaths (TreeNode* root) {
       
        vector<int> v(10);
        for(int i=0;i<10;i++) v[i]=0;
        solve(root,v);
        // for(int i=0;i<ans.size();i++)
        // {
        //     for(int j=0;j<ans[i].size();j++)
        //     {
        //         cout<<ans[i][j]<<" ";
        //     }
        //     cout<<endl;
        // }
        int an=0;
        for(int i=0;i<ans.size();i++)
        {
            if(check(ans[i]))
            {
            //for(int j=0;j<ans[i].size();j++) cout<<ans[i][j]<<" ";
                an++; 
            }          
        }
               return an;
    }
};
