//

class Solution {
 public:
  string tree2str(TreeNode *t) {
   if (t == NULL) return "";
        string s = to_string(t->val);
        if (t->left) s += '(' + tree2str(t->left) + ')';
        else if (t->right) s += "()";
        if (t->right) s += '(' + tree2str(t->right) + ')';
        return s;
  }
};

// /**
//  * Definition for a binary tree node.
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  * };
//  */
// class Solution {
// public:
//     string tree(TreeNode* root)
//     {
//         if(!root) return "";
//         string left= tree(root->left) ;
//         string right=tree(root->right);
//         if(left!="" && right!="")
//         return ("(" + to_string(root->val) + left +right+")");
//         else if(right!="")
//             return ("(" + to_string(root->val) + "()" +right+")");
//         else 
//              return ("(" + to_string(root->val) +left+")");
//     }
        
//     string tree2str(TreeNode* root) {
//          string ans=tree(root);
//         return ans.substr(1,ans.size()-2);
//     }
// };
};
