// we have to find all the disconnected components in the graph , use dfs anf increse the count in for loop at any 1 mark all its adjected 1's as visited , then move to next component 

class Solution {
public:
    int vis[301][301]={0}; // visted array
    void dfs(int i,int j,vector<vector<char>> &grid)
    {
        vis[i][j]=1;  
        // the the dfs in all four directions
        if(i-1>=0 && grid[i-1][j]=='1' && vis[i-1][j]==0) 
            dfs(i-1,j,grid); 
        if(j-1>=0 && grid[i][j-1]=='1'  && vis[i][j-1]==0) 
            dfs(i,j-1,grid);
        if(i+1<grid.size() && grid[i+1][j]=='1'  && vis[i+1][j]==0)
            dfs(i+1,j,grid);
        if(j+1<grid[0].size() && grid[i][j+1]=='1'  && vis[i][j+1]==0) 
            dfs(i,j+1,grid);
        
        return ;
    }
    
    
    int numIslands(vector<vector<char>>& grid) {
      int n=grid[0].size(), m=grid.size(),count=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1' && vis[i][j]==0)
                {
                    dfs(i,j,grid);
                    count++;
                }
            }
        }
        return count;
    }
};
